// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packet.proto

#include "Packet.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace testtree {
namespace serialize {
constexpr serBlock::serBlock(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sdata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , shash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , prevhash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nblocknum_(PROTOBUF_ULONGLONG(0))
  , nnonce_(PROTOBUF_ULONGLONG(0))
  , ttime_(PROTOBUF_ULONGLONG(0)){}
struct serBlockDefaultTypeInternal {
  constexpr serBlockDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~serBlockDefaultTypeInternal() {}
  union {
    serBlock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT serBlockDefaultTypeInternal _serBlock_default_instance_;
constexpr serBlockchain::serBlockchain(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_()
  , blockcount_(PROTOBUF_ULONGLONG(0))
  , ndifficulty_(0u){}
struct serBlockchainDefaultTypeInternal {
  constexpr serBlockchainDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~serBlockchainDefaultTypeInternal() {}
  union {
    serBlockchain _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT serBlockchainDefaultTypeInternal _serBlockchain_default_instance_;
constexpr serUser::serUser(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nickname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , aboutyourself_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , firstname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , secondname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , userid_(PROTOBUF_ULONGLONG(0)){}
struct serUserDefaultTypeInternal {
  constexpr serUserDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~serUserDefaultTypeInternal() {}
  union {
    serUser _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT serUserDefaultTypeInternal _serUser_default_instance_;
constexpr serTree::serTree(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : alldata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct serTreeDefaultTypeInternal {
  constexpr serTreeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~serTreeDefaultTypeInternal() {}
  union {
    serTree _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT serTreeDefaultTypeInternal _serTree_default_instance_;
}  // namespace serialize
}  // namespace testtree
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Packet_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Packet_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Packet_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Packet_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testtree::serialize::serBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::testtree::serialize::serBlock, nblocknum_),
  PROTOBUF_FIELD_OFFSET(::testtree::serialize::serBlock, nnonce_),
  PROTOBUF_FIELD_OFFSET(::testtree::serialize::serBlock, sdata_),
  PROTOBUF_FIELD_OFFSET(::testtree::serialize::serBlock, shash_),
  PROTOBUF_FIELD_OFFSET(::testtree::serialize::serBlock, ttime_),
  PROTOBUF_FIELD_OFFSET(::testtree::serialize::serBlock, prevhash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testtree::serialize::serBlockchain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::testtree::serialize::serBlockchain, blockcount_),
  PROTOBUF_FIELD_OFFSET(::testtree::serialize::serBlockchain, ndifficulty_),
  PROTOBUF_FIELD_OFFSET(::testtree::serialize::serBlockchain, block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testtree::serialize::serUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::testtree::serialize::serUser, nickname_),
  PROTOBUF_FIELD_OFFSET(::testtree::serialize::serUser, aboutyourself_),
  PROTOBUF_FIELD_OFFSET(::testtree::serialize::serUser, firstname_),
  PROTOBUF_FIELD_OFFSET(::testtree::serialize::serUser, secondname_),
  PROTOBUF_FIELD_OFFSET(::testtree::serialize::serUser, userid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testtree::serialize::serTree, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::testtree::serialize::serTree, alldata_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::testtree::serialize::serBlock)},
  { 11, -1, sizeof(::testtree::serialize::serBlockchain)},
  { 19, -1, sizeof(::testtree::serialize::serUser)},
  { 29, -1, sizeof(::testtree::serialize::serTree)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::testtree::serialize::_serBlock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::testtree::serialize::_serBlockchain_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::testtree::serialize::_serUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::testtree::serialize::_serTree_default_instance_),
};

const char descriptor_table_protodef_Packet_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014Packet.proto\022\022testtree.serialize\"l\n\010se"
  "rBlock\022\021\n\tnBlockNum\030\001 \001(\006\022\016\n\006nNonce\030\002 \001("
  "\006\022\r\n\005sData\030\003 \001(\t\022\r\n\005sHash\030\004 \001(\t\022\r\n\005tTime"
  "\030\005 \001(\006\022\020\n\010prevHash\030\006 \001(\t\"e\n\rserBlockchai"
  "n\022\022\n\nBlockCount\030\001 \001(\006\022\023\n\013nDifficulty\030\002 \001"
  "(\007\022+\n\005block\030\003 \003(\0132\034.testtree.serialize.s"
  "erBlock\"i\n\007serUser\022\020\n\010nickname\030\001 \001(\t\022\025\n\r"
  "aboutYourself\030\002 \001(\t\022\021\n\tfirstName\030\003 \001(\t\022\022"
  "\n\nsecondName\030\004 \001(\t\022\016\n\006userId\030\005 \001(\006\"\032\n\007se"
  "rTree\022\017\n\007alldata\030\001 \001(\tb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Packet_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Packet_2eproto = {
  false, false, 390, descriptor_table_protodef_Packet_2eproto, "Packet.proto", 
  &descriptor_table_Packet_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_Packet_2eproto::offsets,
  file_level_metadata_Packet_2eproto, file_level_enum_descriptors_Packet_2eproto, file_level_service_descriptors_Packet_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_Packet_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Packet_2eproto);
  return descriptor_table_Packet_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Packet_2eproto(&descriptor_table_Packet_2eproto);
namespace testtree {
namespace serialize {

// ===================================================================

class serBlock::_Internal {
 public:
};

serBlock::serBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:testtree.serialize.serBlock)
}
serBlock::serBlock(const serBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sdata().empty()) {
    sdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sdata(), 
      GetArena());
  }
  shash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_shash().empty()) {
    shash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_shash(), 
      GetArena());
  }
  prevhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prevhash().empty()) {
    prevhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_prevhash(), 
      GetArena());
  }
  ::memcpy(&nblocknum_, &from.nblocknum_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttime_) -
    reinterpret_cast<char*>(&nblocknum_)) + sizeof(ttime_));
  // @@protoc_insertion_point(copy_constructor:testtree.serialize.serBlock)
}

void serBlock::SharedCtor() {
sdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
shash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
prevhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&nblocknum_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ttime_) -
    reinterpret_cast<char*>(&nblocknum_)) + sizeof(ttime_));
}

serBlock::~serBlock() {
  // @@protoc_insertion_point(destructor:testtree.serialize.serBlock)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void serBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prevhash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void serBlock::ArenaDtor(void* object) {
  serBlock* _this = reinterpret_cast< serBlock* >(object);
  (void)_this;
}
void serBlock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void serBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void serBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:testtree.serialize.serBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sdata_.ClearToEmpty();
  shash_.ClearToEmpty();
  prevhash_.ClearToEmpty();
  ::memset(&nblocknum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ttime_) -
      reinterpret_cast<char*>(&nblocknum_)) + sizeof(ttime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* serBlock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // fixed64 nBlockNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          nblocknum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // fixed64 nNonce = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          nnonce_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // string sData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "testtree.serialize.serBlock.sData"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sHash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_shash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "testtree.serialize.serBlock.sHash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // fixed64 tTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          ttime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // string prevHash = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_prevhash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "testtree.serialize.serBlock.prevHash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* serBlock::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testtree.serialize.serBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 nBlockNum = 1;
  if (this->nblocknum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_nblocknum(), target);
  }

  // fixed64 nNonce = 2;
  if (this->nnonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_nnonce(), target);
  }

  // string sData = 3;
  if (this->sdata().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sdata().data(), static_cast<int>(this->_internal_sdata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testtree.serialize.serBlock.sData");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sdata(), target);
  }

  // string sHash = 4;
  if (this->shash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_shash().data(), static_cast<int>(this->_internal_shash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testtree.serialize.serBlock.sHash");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_shash(), target);
  }

  // fixed64 tTime = 5;
  if (this->ttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(5, this->_internal_ttime(), target);
  }

  // string prevHash = 6;
  if (this->prevhash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prevhash().data(), static_cast<int>(this->_internal_prevhash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testtree.serialize.serBlock.prevHash");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_prevhash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testtree.serialize.serBlock)
  return target;
}

size_t serBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testtree.serialize.serBlock)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sData = 3;
  if (this->sdata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sdata());
  }

  // string sHash = 4;
  if (this->shash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_shash());
  }

  // string prevHash = 6;
  if (this->prevhash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prevhash());
  }

  // fixed64 nBlockNum = 1;
  if (this->nblocknum() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 nNonce = 2;
  if (this->nnonce() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 tTime = 5;
  if (this->ttime() != 0) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void serBlock::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testtree.serialize.serBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const serBlock* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<serBlock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testtree.serialize.serBlock)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testtree.serialize.serBlock)
    MergeFrom(*source);
  }
}

void serBlock::MergeFrom(const serBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testtree.serialize.serBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sdata().size() > 0) {
    _internal_set_sdata(from._internal_sdata());
  }
  if (from.shash().size() > 0) {
    _internal_set_shash(from._internal_shash());
  }
  if (from.prevhash().size() > 0) {
    _internal_set_prevhash(from._internal_prevhash());
  }
  if (from.nblocknum() != 0) {
    _internal_set_nblocknum(from._internal_nblocknum());
  }
  if (from.nnonce() != 0) {
    _internal_set_nnonce(from._internal_nnonce());
  }
  if (from.ttime() != 0) {
    _internal_set_ttime(from._internal_ttime());
  }
}

void serBlock::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testtree.serialize.serBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void serBlock::CopyFrom(const serBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testtree.serialize.serBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool serBlock::IsInitialized() const {
  return true;
}

void serBlock::InternalSwap(serBlock* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sdata_.Swap(&other->sdata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  shash_.Swap(&other->shash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prevhash_.Swap(&other->prevhash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(serBlock, ttime_)
      + sizeof(serBlock::ttime_)
      - PROTOBUF_FIELD_OFFSET(serBlock, nblocknum_)>(
          reinterpret_cast<char*>(&nblocknum_),
          reinterpret_cast<char*>(&other->nblocknum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata serBlock::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class serBlockchain::_Internal {
 public:
};

serBlockchain::serBlockchain(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  block_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:testtree.serialize.serBlockchain)
}
serBlockchain::serBlockchain(const serBlockchain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      block_(from.block_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&blockcount_, &from.blockcount_,
    static_cast<size_t>(reinterpret_cast<char*>(&ndifficulty_) -
    reinterpret_cast<char*>(&blockcount_)) + sizeof(ndifficulty_));
  // @@protoc_insertion_point(copy_constructor:testtree.serialize.serBlockchain)
}

void serBlockchain::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&blockcount_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ndifficulty_) -
    reinterpret_cast<char*>(&blockcount_)) + sizeof(ndifficulty_));
}

serBlockchain::~serBlockchain() {
  // @@protoc_insertion_point(destructor:testtree.serialize.serBlockchain)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void serBlockchain::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void serBlockchain::ArenaDtor(void* object) {
  serBlockchain* _this = reinterpret_cast< serBlockchain* >(object);
  (void)_this;
}
void serBlockchain::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void serBlockchain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void serBlockchain::Clear() {
// @@protoc_insertion_point(message_clear_start:testtree.serialize.serBlockchain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_.Clear();
  ::memset(&blockcount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ndifficulty_) -
      reinterpret_cast<char*>(&blockcount_)) + sizeof(ndifficulty_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* serBlockchain::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // fixed64 BlockCount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          blockcount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // fixed32 nDifficulty = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          ndifficulty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // repeated .testtree.serialize.serBlock block = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_block(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* serBlockchain::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testtree.serialize.serBlockchain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 BlockCount = 1;
  if (this->blockcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_blockcount(), target);
  }

  // fixed32 nDifficulty = 2;
  if (this->ndifficulty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_ndifficulty(), target);
  }

  // repeated .testtree.serialize.serBlock block = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_block_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_block(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testtree.serialize.serBlockchain)
  return target;
}

size_t serBlockchain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testtree.serialize.serBlockchain)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .testtree.serialize.serBlock block = 3;
  total_size += 1UL * this->_internal_block_size();
  for (const auto& msg : this->block_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // fixed64 BlockCount = 1;
  if (this->blockcount() != 0) {
    total_size += 1 + 8;
  }

  // fixed32 nDifficulty = 2;
  if (this->ndifficulty() != 0) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void serBlockchain::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testtree.serialize.serBlockchain)
  GOOGLE_DCHECK_NE(&from, this);
  const serBlockchain* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<serBlockchain>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testtree.serialize.serBlockchain)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testtree.serialize.serBlockchain)
    MergeFrom(*source);
  }
}

void serBlockchain::MergeFrom(const serBlockchain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testtree.serialize.serBlockchain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  block_.MergeFrom(from.block_);
  if (from.blockcount() != 0) {
    _internal_set_blockcount(from._internal_blockcount());
  }
  if (from.ndifficulty() != 0) {
    _internal_set_ndifficulty(from._internal_ndifficulty());
  }
}

void serBlockchain::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testtree.serialize.serBlockchain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void serBlockchain::CopyFrom(const serBlockchain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testtree.serialize.serBlockchain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool serBlockchain::IsInitialized() const {
  return true;
}

void serBlockchain::InternalSwap(serBlockchain* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  block_.InternalSwap(&other->block_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(serBlockchain, ndifficulty_)
      + sizeof(serBlockchain::ndifficulty_)
      - PROTOBUF_FIELD_OFFSET(serBlockchain, blockcount_)>(
          reinterpret_cast<char*>(&blockcount_),
          reinterpret_cast<char*>(&other->blockcount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata serBlockchain::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class serUser::_Internal {
 public:
};

serUser::serUser(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:testtree.serialize.serUser)
}
serUser::serUser(const serUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nickname().empty()) {
    nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nickname(), 
      GetArena());
  }
  aboutyourself_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_aboutyourself().empty()) {
    aboutyourself_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_aboutyourself(), 
      GetArena());
  }
  firstname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_firstname().empty()) {
    firstname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_firstname(), 
      GetArena());
  }
  secondname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secondname().empty()) {
    secondname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_secondname(), 
      GetArena());
  }
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:testtree.serialize.serUser)
}

void serUser::SharedCtor() {
nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
aboutyourself_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
firstname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
secondname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
userid_ = PROTOBUF_ULONGLONG(0);
}

serUser::~serUser() {
  // @@protoc_insertion_point(destructor:testtree.serialize.serUser)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void serUser::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  aboutyourself_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  firstname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secondname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void serUser::ArenaDtor(void* object) {
  serUser* _this = reinterpret_cast< serUser* >(object);
  (void)_this;
}
void serUser::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void serUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void serUser::Clear() {
// @@protoc_insertion_point(message_clear_start:testtree.serialize.serUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nickname_.ClearToEmpty();
  aboutyourself_.ClearToEmpty();
  firstname_.ClearToEmpty();
  secondname_.ClearToEmpty();
  userid_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* serUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string nickname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "testtree.serialize.serUser.nickname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string aboutYourself = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_aboutyourself();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "testtree.serialize.serUser.aboutYourself"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string firstName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_firstname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "testtree.serialize.serUser.firstName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string secondName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_secondname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "testtree.serialize.serUser.secondName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // fixed64 userId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* serUser::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testtree.serialize.serUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string nickname = 1;
  if (this->nickname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testtree.serialize.serUser.nickname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nickname(), target);
  }

  // string aboutYourself = 2;
  if (this->aboutyourself().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_aboutyourself().data(), static_cast<int>(this->_internal_aboutyourself().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testtree.serialize.serUser.aboutYourself");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_aboutyourself(), target);
  }

  // string firstName = 3;
  if (this->firstname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_firstname().data(), static_cast<int>(this->_internal_firstname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testtree.serialize.serUser.firstName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_firstname(), target);
  }

  // string secondName = 4;
  if (this->secondname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secondname().data(), static_cast<int>(this->_internal_secondname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testtree.serialize.serUser.secondName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_secondname(), target);
  }

  // fixed64 userId = 5;
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(5, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testtree.serialize.serUser)
  return target;
}

size_t serUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testtree.serialize.serUser)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nickname = 1;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // string aboutYourself = 2;
  if (this->aboutyourself().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_aboutyourself());
  }

  // string firstName = 3;
  if (this->firstname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_firstname());
  }

  // string secondName = 4;
  if (this->secondname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secondname());
  }

  // fixed64 userId = 5;
  if (this->userid() != 0) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void serUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testtree.serialize.serUser)
  GOOGLE_DCHECK_NE(&from, this);
  const serUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<serUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testtree.serialize.serUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testtree.serialize.serUser)
    MergeFrom(*source);
  }
}

void serUser::MergeFrom(const serUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testtree.serialize.serUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nickname().size() > 0) {
    _internal_set_nickname(from._internal_nickname());
  }
  if (from.aboutyourself().size() > 0) {
    _internal_set_aboutyourself(from._internal_aboutyourself());
  }
  if (from.firstname().size() > 0) {
    _internal_set_firstname(from._internal_firstname());
  }
  if (from.secondname().size() > 0) {
    _internal_set_secondname(from._internal_secondname());
  }
  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
}

void serUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testtree.serialize.serUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void serUser::CopyFrom(const serUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testtree.serialize.serUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool serUser::IsInitialized() const {
  return true;
}

void serUser::InternalSwap(serUser* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nickname_.Swap(&other->nickname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  aboutyourself_.Swap(&other->aboutyourself_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  firstname_.Swap(&other->firstname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  secondname_.Swap(&other->secondname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(userid_, other->userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata serUser::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class serTree::_Internal {
 public:
};

serTree::serTree(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:testtree.serialize.serTree)
}
serTree::serTree(const serTree& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  alldata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_alldata().empty()) {
    alldata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_alldata(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:testtree.serialize.serTree)
}

void serTree::SharedCtor() {
alldata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

serTree::~serTree() {
  // @@protoc_insertion_point(destructor:testtree.serialize.serTree)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void serTree::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  alldata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void serTree::ArenaDtor(void* object) {
  serTree* _this = reinterpret_cast< serTree* >(object);
  (void)_this;
}
void serTree::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void serTree::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void serTree::Clear() {
// @@protoc_insertion_point(message_clear_start:testtree.serialize.serTree)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alldata_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* serTree::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string alldata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_alldata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "testtree.serialize.serTree.alldata"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* serTree::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testtree.serialize.serTree)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string alldata = 1;
  if (this->alldata().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alldata().data(), static_cast<int>(this->_internal_alldata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testtree.serialize.serTree.alldata");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_alldata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testtree.serialize.serTree)
  return target;
}

size_t serTree::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testtree.serialize.serTree)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string alldata = 1;
  if (this->alldata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alldata());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void serTree::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testtree.serialize.serTree)
  GOOGLE_DCHECK_NE(&from, this);
  const serTree* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<serTree>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testtree.serialize.serTree)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testtree.serialize.serTree)
    MergeFrom(*source);
  }
}

void serTree::MergeFrom(const serTree& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testtree.serialize.serTree)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.alldata().size() > 0) {
    _internal_set_alldata(from._internal_alldata());
  }
}

void serTree::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testtree.serialize.serTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void serTree::CopyFrom(const serTree& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testtree.serialize.serTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool serTree::IsInitialized() const {
  return true;
}

void serTree::InternalSwap(serTree* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  alldata_.Swap(&other->alldata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata serTree::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace serialize
}  // namespace testtree
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::testtree::serialize::serBlock* Arena::CreateMaybeMessage< ::testtree::serialize::serBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testtree::serialize::serBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::testtree::serialize::serBlockchain* Arena::CreateMaybeMessage< ::testtree::serialize::serBlockchain >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testtree::serialize::serBlockchain >(arena);
}
template<> PROTOBUF_NOINLINE ::testtree::serialize::serUser* Arena::CreateMaybeMessage< ::testtree::serialize::serUser >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testtree::serialize::serUser >(arena);
}
template<> PROTOBUF_NOINLINE ::testtree::serialize::serTree* Arena::CreateMaybeMessage< ::testtree::serialize::serTree >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testtree::serialize::serTree >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
