// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packet.proto

#include "Packet.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace testtree {
namespace serialize {
constexpr FirstPerson::FirstPerson(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(PROTOBUF_ULONGLONG(0)){}
struct FirstPersonDefaultTypeInternal {
  constexpr FirstPersonDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FirstPersonDefaultTypeInternal() {}
  union {
    FirstPerson _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FirstPersonDefaultTypeInternal _FirstPerson_default_instance_;
constexpr SecondPerson::SecondPerson(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(PROTOBUF_ULONGLONG(0)){}
struct SecondPersonDefaultTypeInternal {
  constexpr SecondPersonDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SecondPersonDefaultTypeInternal() {}
  union {
    SecondPerson _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SecondPersonDefaultTypeInternal _SecondPerson_default_instance_;
constexpr Full_Message::Full_Message(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chatid_(PROTOBUF_ULONGLONG(0))
  , authorid_(PROTOBUF_ULONGLONG(0)){}
struct Full_MessageDefaultTypeInternal {
  constexpr Full_MessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Full_MessageDefaultTypeInternal() {}
  union {
    Full_Message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Full_MessageDefaultTypeInternal _Full_Message_default_instance_;
constexpr Chat::Chat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fulltxt_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , frsprs_chat_(nullptr)
  , scndprs_chat_(nullptr)
  , mes_(nullptr)
  , chatid_(PROTOBUF_ULONGLONG(0)){}
struct ChatDefaultTypeInternal {
  constexpr ChatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChatDefaultTypeInternal() {}
  union {
    Chat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChatDefaultTypeInternal _Chat_default_instance_;
}  // namespace serialize
}  // namespace testtree
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Packet_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Packet_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Packet_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Packet_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testtree::serialize::FirstPerson, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::testtree::serialize::FirstPerson, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testtree::serialize::SecondPerson, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::testtree::serialize::SecondPerson, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testtree::serialize::Full_Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::testtree::serialize::Full_Message, data_),
  PROTOBUF_FIELD_OFFSET(::testtree::serialize::Full_Message, chatid_),
  PROTOBUF_FIELD_OFFSET(::testtree::serialize::Full_Message, authorid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testtree::serialize::Chat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::testtree::serialize::Chat, chatid_),
  PROTOBUF_FIELD_OFFSET(::testtree::serialize::Chat, frsprs_chat_),
  PROTOBUF_FIELD_OFFSET(::testtree::serialize::Chat, scndprs_chat_),
  PROTOBUF_FIELD_OFFSET(::testtree::serialize::Chat, mes_),
  PROTOBUF_FIELD_OFFSET(::testtree::serialize::Chat, fulltxt_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::testtree::serialize::FirstPerson)},
  { 6, -1, sizeof(::testtree::serialize::SecondPerson)},
  { 12, -1, sizeof(::testtree::serialize::Full_Message)},
  { 20, -1, sizeof(::testtree::serialize::Chat)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::testtree::serialize::_FirstPerson_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::testtree::serialize::_SecondPerson_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::testtree::serialize::_Full_Message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::testtree::serialize::_Chat_default_instance_),
};

const char descriptor_table_protodef_Packet_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014Packet.proto\022\022testtree.serialize\"\031\n\013Fi"
  "rstPerson\022\n\n\002id\030\001 \001(\006\"\032\n\014SecondPerson\022\n\n"
  "\002id\030\001 \001(\006\">\n\014Full_Message\022\014\n\004data\030\001 \001(\t\022"
  "\016\n\006chatId\030\002 \001(\006\022\020\n\010authorId\030\003 \001(\006\"\304\001\n\004Ch"
  "at\022\016\n\006chatid\030\001 \001(\006\0224\n\013frsprs_chat\030\002 \001(\0132"
  "\037.testtree.serialize.FirstPerson\0226\n\014scnd"
  "prs_chat\030\003 \001(\0132 .testtree.serialize.Seco"
  "ndPerson\022-\n\003mes\030\004 \001(\0132 .testtree.seriali"
  "ze.Full_Message\022\017\n\007fulltxt\030\005 \001(\tb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Packet_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Packet_2eproto = {
  false, false, 360, descriptor_table_protodef_Packet_2eproto, "Packet.proto", 
  &descriptor_table_Packet_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_Packet_2eproto::offsets,
  file_level_metadata_Packet_2eproto, file_level_enum_descriptors_Packet_2eproto, file_level_service_descriptors_Packet_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_Packet_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Packet_2eproto);
  return descriptor_table_Packet_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Packet_2eproto(&descriptor_table_Packet_2eproto);
namespace testtree {
namespace serialize {

// ===================================================================

class FirstPerson::_Internal {
 public:
};

FirstPerson::FirstPerson(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:testtree.serialize.FirstPerson)
}
FirstPerson::FirstPerson(const FirstPerson& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:testtree.serialize.FirstPerson)
}

void FirstPerson::SharedCtor() {
id_ = PROTOBUF_ULONGLONG(0);
}

FirstPerson::~FirstPerson() {
  // @@protoc_insertion_point(destructor:testtree.serialize.FirstPerson)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FirstPerson::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FirstPerson::ArenaDtor(void* object) {
  FirstPerson* _this = reinterpret_cast< FirstPerson* >(object);
  (void)_this;
}
void FirstPerson::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FirstPerson::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FirstPerson::Clear() {
// @@protoc_insertion_point(message_clear_start:testtree.serialize.FirstPerson)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FirstPerson::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // fixed64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirstPerson::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testtree.serialize.FirstPerson)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testtree.serialize.FirstPerson)
  return target;
}

size_t FirstPerson::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testtree.serialize.FirstPerson)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // fixed64 id = 1;
  if (this->id() != 0) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirstPerson::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testtree.serialize.FirstPerson)
  GOOGLE_DCHECK_NE(&from, this);
  const FirstPerson* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirstPerson>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testtree.serialize.FirstPerson)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testtree.serialize.FirstPerson)
    MergeFrom(*source);
  }
}

void FirstPerson::MergeFrom(const FirstPerson& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testtree.serialize.FirstPerson)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void FirstPerson::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testtree.serialize.FirstPerson)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirstPerson::CopyFrom(const FirstPerson& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testtree.serialize.FirstPerson)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirstPerson::IsInitialized() const {
  return true;
}

void FirstPerson::InternalSwap(FirstPerson* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirstPerson::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SecondPerson::_Internal {
 public:
};

SecondPerson::SecondPerson(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:testtree.serialize.SecondPerson)
}
SecondPerson::SecondPerson(const SecondPerson& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:testtree.serialize.SecondPerson)
}

void SecondPerson::SharedCtor() {
id_ = PROTOBUF_ULONGLONG(0);
}

SecondPerson::~SecondPerson() {
  // @@protoc_insertion_point(destructor:testtree.serialize.SecondPerson)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SecondPerson::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SecondPerson::ArenaDtor(void* object) {
  SecondPerson* _this = reinterpret_cast< SecondPerson* >(object);
  (void)_this;
}
void SecondPerson::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SecondPerson::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SecondPerson::Clear() {
// @@protoc_insertion_point(message_clear_start:testtree.serialize.SecondPerson)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SecondPerson::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // fixed64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SecondPerson::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testtree.serialize.SecondPerson)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testtree.serialize.SecondPerson)
  return target;
}

size_t SecondPerson::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testtree.serialize.SecondPerson)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // fixed64 id = 1;
  if (this->id() != 0) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecondPerson::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testtree.serialize.SecondPerson)
  GOOGLE_DCHECK_NE(&from, this);
  const SecondPerson* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SecondPerson>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testtree.serialize.SecondPerson)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testtree.serialize.SecondPerson)
    MergeFrom(*source);
  }
}

void SecondPerson::MergeFrom(const SecondPerson& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testtree.serialize.SecondPerson)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void SecondPerson::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testtree.serialize.SecondPerson)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecondPerson::CopyFrom(const SecondPerson& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testtree.serialize.SecondPerson)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecondPerson::IsInitialized() const {
  return true;
}

void SecondPerson::InternalSwap(SecondPerson* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SecondPerson::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Full_Message::_Internal {
 public:
};

Full_Message::Full_Message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:testtree.serialize.Full_Message)
}
Full_Message::Full_Message(const Full_Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  ::memcpy(&chatid_, &from.chatid_,
    static_cast<size_t>(reinterpret_cast<char*>(&authorid_) -
    reinterpret_cast<char*>(&chatid_)) + sizeof(authorid_));
  // @@protoc_insertion_point(copy_constructor:testtree.serialize.Full_Message)
}

void Full_Message::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chatid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&authorid_) -
    reinterpret_cast<char*>(&chatid_)) + sizeof(authorid_));
}

Full_Message::~Full_Message() {
  // @@protoc_insertion_point(destructor:testtree.serialize.Full_Message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Full_Message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Full_Message::ArenaDtor(void* object) {
  Full_Message* _this = reinterpret_cast< Full_Message* >(object);
  (void)_this;
}
void Full_Message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Full_Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Full_Message::Clear() {
// @@protoc_insertion_point(message_clear_start:testtree.serialize.Full_Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  ::memset(&chatid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&authorid_) -
      reinterpret_cast<char*>(&chatid_)) + sizeof(authorid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Full_Message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "testtree.serialize.Full_Message.data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // fixed64 chatId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          chatid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // fixed64 authorId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          authorid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Full_Message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testtree.serialize.Full_Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string data = 1;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testtree.serialize.Full_Message.data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_data(), target);
  }

  // fixed64 chatId = 2;
  if (this->chatid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_chatid(), target);
  }

  // fixed64 authorId = 3;
  if (this->authorid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_authorid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testtree.serialize.Full_Message)
  return target;
}

size_t Full_Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testtree.serialize.Full_Message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // fixed64 chatId = 2;
  if (this->chatid() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 authorId = 3;
  if (this->authorid() != 0) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Full_Message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testtree.serialize.Full_Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Full_Message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Full_Message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testtree.serialize.Full_Message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testtree.serialize.Full_Message)
    MergeFrom(*source);
  }
}

void Full_Message::MergeFrom(const Full_Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testtree.serialize.Full_Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.chatid() != 0) {
    _internal_set_chatid(from._internal_chatid());
  }
  if (from.authorid() != 0) {
    _internal_set_authorid(from._internal_authorid());
  }
}

void Full_Message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testtree.serialize.Full_Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Full_Message::CopyFrom(const Full_Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testtree.serialize.Full_Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Full_Message::IsInitialized() const {
  return true;
}

void Full_Message::InternalSwap(Full_Message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Full_Message, authorid_)
      + sizeof(Full_Message::authorid_)
      - PROTOBUF_FIELD_OFFSET(Full_Message, chatid_)>(
          reinterpret_cast<char*>(&chatid_),
          reinterpret_cast<char*>(&other->chatid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Full_Message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Chat::_Internal {
 public:
  static const ::testtree::serialize::FirstPerson& frsprs_chat(const Chat* msg);
  static const ::testtree::serialize::SecondPerson& scndprs_chat(const Chat* msg);
  static const ::testtree::serialize::Full_Message& mes(const Chat* msg);
};

const ::testtree::serialize::FirstPerson&
Chat::_Internal::frsprs_chat(const Chat* msg) {
  return *msg->frsprs_chat_;
}
const ::testtree::serialize::SecondPerson&
Chat::_Internal::scndprs_chat(const Chat* msg) {
  return *msg->scndprs_chat_;
}
const ::testtree::serialize::Full_Message&
Chat::_Internal::mes(const Chat* msg) {
  return *msg->mes_;
}
Chat::Chat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:testtree.serialize.Chat)
}
Chat::Chat(const Chat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fulltxt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fulltxt().empty()) {
    fulltxt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fulltxt(), 
      GetArena());
  }
  if (from._internal_has_frsprs_chat()) {
    frsprs_chat_ = new ::testtree::serialize::FirstPerson(*from.frsprs_chat_);
  } else {
    frsprs_chat_ = nullptr;
  }
  if (from._internal_has_scndprs_chat()) {
    scndprs_chat_ = new ::testtree::serialize::SecondPerson(*from.scndprs_chat_);
  } else {
    scndprs_chat_ = nullptr;
  }
  if (from._internal_has_mes()) {
    mes_ = new ::testtree::serialize::Full_Message(*from.mes_);
  } else {
    mes_ = nullptr;
  }
  chatid_ = from.chatid_;
  // @@protoc_insertion_point(copy_constructor:testtree.serialize.Chat)
}

void Chat::SharedCtor() {
fulltxt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&frsprs_chat_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chatid_) -
    reinterpret_cast<char*>(&frsprs_chat_)) + sizeof(chatid_));
}

Chat::~Chat() {
  // @@protoc_insertion_point(destructor:testtree.serialize.Chat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Chat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  fulltxt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete frsprs_chat_;
  if (this != internal_default_instance()) delete scndprs_chat_;
  if (this != internal_default_instance()) delete mes_;
}

void Chat::ArenaDtor(void* object) {
  Chat* _this = reinterpret_cast< Chat* >(object);
  (void)_this;
}
void Chat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Chat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Chat::Clear() {
// @@protoc_insertion_point(message_clear_start:testtree.serialize.Chat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fulltxt_.ClearToEmpty();
  if (GetArena() == nullptr && frsprs_chat_ != nullptr) {
    delete frsprs_chat_;
  }
  frsprs_chat_ = nullptr;
  if (GetArena() == nullptr && scndprs_chat_ != nullptr) {
    delete scndprs_chat_;
  }
  scndprs_chat_ = nullptr;
  if (GetArena() == nullptr && mes_ != nullptr) {
    delete mes_;
  }
  mes_ = nullptr;
  chatid_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // fixed64 chatid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          chatid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // .testtree.serialize.FirstPerson frsprs_chat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_frsprs_chat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .testtree.serialize.SecondPerson scndprs_chat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_scndprs_chat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .testtree.serialize.Full_Message mes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_mes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fulltxt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_fulltxt();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "testtree.serialize.Chat.fulltxt"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Chat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testtree.serialize.Chat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 chatid = 1;
  if (this->chatid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_chatid(), target);
  }

  // .testtree.serialize.FirstPerson frsprs_chat = 2;
  if (this->has_frsprs_chat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::frsprs_chat(this), target, stream);
  }

  // .testtree.serialize.SecondPerson scndprs_chat = 3;
  if (this->has_scndprs_chat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::scndprs_chat(this), target, stream);
  }

  // .testtree.serialize.Full_Message mes = 4;
  if (this->has_mes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::mes(this), target, stream);
  }

  // string fulltxt = 5;
  if (this->fulltxt().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fulltxt().data(), static_cast<int>(this->_internal_fulltxt().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testtree.serialize.Chat.fulltxt");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_fulltxt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testtree.serialize.Chat)
  return target;
}

size_t Chat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testtree.serialize.Chat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string fulltxt = 5;
  if (this->fulltxt().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fulltxt());
  }

  // .testtree.serialize.FirstPerson frsprs_chat = 2;
  if (this->has_frsprs_chat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *frsprs_chat_);
  }

  // .testtree.serialize.SecondPerson scndprs_chat = 3;
  if (this->has_scndprs_chat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scndprs_chat_);
  }

  // .testtree.serialize.Full_Message mes = 4;
  if (this->has_mes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mes_);
  }

  // fixed64 chatid = 1;
  if (this->chatid() != 0) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Chat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testtree.serialize.Chat)
  GOOGLE_DCHECK_NE(&from, this);
  const Chat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Chat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testtree.serialize.Chat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testtree.serialize.Chat)
    MergeFrom(*source);
  }
}

void Chat::MergeFrom(const Chat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testtree.serialize.Chat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fulltxt().size() > 0) {
    _internal_set_fulltxt(from._internal_fulltxt());
  }
  if (from.has_frsprs_chat()) {
    _internal_mutable_frsprs_chat()->::testtree::serialize::FirstPerson::MergeFrom(from._internal_frsprs_chat());
  }
  if (from.has_scndprs_chat()) {
    _internal_mutable_scndprs_chat()->::testtree::serialize::SecondPerson::MergeFrom(from._internal_scndprs_chat());
  }
  if (from.has_mes()) {
    _internal_mutable_mes()->::testtree::serialize::Full_Message::MergeFrom(from._internal_mes());
  }
  if (from.chatid() != 0) {
    _internal_set_chatid(from._internal_chatid());
  }
}

void Chat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testtree.serialize.Chat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chat::CopyFrom(const Chat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testtree.serialize.Chat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chat::IsInitialized() const {
  return true;
}

void Chat::InternalSwap(Chat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fulltxt_.Swap(&other->fulltxt_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Chat, chatid_)
      + sizeof(Chat::chatid_)
      - PROTOBUF_FIELD_OFFSET(Chat, frsprs_chat_)>(
          reinterpret_cast<char*>(&frsprs_chat_),
          reinterpret_cast<char*>(&other->frsprs_chat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Chat::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace serialize
}  // namespace testtree
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::testtree::serialize::FirstPerson* Arena::CreateMaybeMessage< ::testtree::serialize::FirstPerson >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testtree::serialize::FirstPerson >(arena);
}
template<> PROTOBUF_NOINLINE ::testtree::serialize::SecondPerson* Arena::CreateMaybeMessage< ::testtree::serialize::SecondPerson >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testtree::serialize::SecondPerson >(arena);
}
template<> PROTOBUF_NOINLINE ::testtree::serialize::Full_Message* Arena::CreateMaybeMessage< ::testtree::serialize::Full_Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testtree::serialize::Full_Message >(arena);
}
template<> PROTOBUF_NOINLINE ::testtree::serialize::Chat* Arena::CreateMaybeMessage< ::testtree::serialize::Chat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testtree::serialize::Chat >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
