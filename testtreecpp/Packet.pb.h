// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Packet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Packet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Packet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Packet_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Packet_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_Packet_2eproto_metadata_getter(int index);
namespace testtree {
namespace serialize {
class serBlock;
struct serBlockDefaultTypeInternal;
extern serBlockDefaultTypeInternal _serBlock_default_instance_;
class serBlockchain;
struct serBlockchainDefaultTypeInternal;
extern serBlockchainDefaultTypeInternal _serBlockchain_default_instance_;
class serTree;
struct serTreeDefaultTypeInternal;
extern serTreeDefaultTypeInternal _serTree_default_instance_;
class serUser;
struct serUserDefaultTypeInternal;
extern serUserDefaultTypeInternal _serUser_default_instance_;
}  // namespace serialize
}  // namespace testtree
PROTOBUF_NAMESPACE_OPEN
template<> ::testtree::serialize::serBlock* Arena::CreateMaybeMessage<::testtree::serialize::serBlock>(Arena*);
template<> ::testtree::serialize::serBlockchain* Arena::CreateMaybeMessage<::testtree::serialize::serBlockchain>(Arena*);
template<> ::testtree::serialize::serTree* Arena::CreateMaybeMessage<::testtree::serialize::serTree>(Arena*);
template<> ::testtree::serialize::serUser* Arena::CreateMaybeMessage<::testtree::serialize::serUser>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace testtree {
namespace serialize {

// ===================================================================

class serBlock PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:testtree.serialize.serBlock) */ {
 public:
  inline serBlock() : serBlock(nullptr) {}
  virtual ~serBlock();
  explicit constexpr serBlock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  serBlock(const serBlock& from);
  serBlock(serBlock&& from) noexcept
    : serBlock() {
    *this = ::std::move(from);
  }

  inline serBlock& operator=(const serBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline serBlock& operator=(serBlock&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const serBlock& default_instance() {
    return *internal_default_instance();
  }
  static inline const serBlock* internal_default_instance() {
    return reinterpret_cast<const serBlock*>(
               &_serBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(serBlock& a, serBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(serBlock* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(serBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline serBlock* New() const final {
    return CreateMaybeMessage<serBlock>(nullptr);
  }

  serBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<serBlock>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const serBlock& from);
  void MergeFrom(const serBlock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(serBlock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "testtree.serialize.serBlock";
  }
  protected:
  explicit serBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Packet_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSDataFieldNumber = 3,
    kSHashFieldNumber = 4,
    kPrevHashFieldNumber = 6,
    kNBlockNumFieldNumber = 1,
    kNNonceFieldNumber = 2,
    kTTimeFieldNumber = 5,
  };
  // string sData = 3;
  void clear_sdata();
  const std::string& sdata() const;
  void set_sdata(const std::string& value);
  void set_sdata(std::string&& value);
  void set_sdata(const char* value);
  void set_sdata(const char* value, size_t size);
  std::string* mutable_sdata();
  std::string* release_sdata();
  void set_allocated_sdata(std::string* sdata);
  private:
  const std::string& _internal_sdata() const;
  void _internal_set_sdata(const std::string& value);
  std::string* _internal_mutable_sdata();
  public:

  // string sHash = 4;
  void clear_shash();
  const std::string& shash() const;
  void set_shash(const std::string& value);
  void set_shash(std::string&& value);
  void set_shash(const char* value);
  void set_shash(const char* value, size_t size);
  std::string* mutable_shash();
  std::string* release_shash();
  void set_allocated_shash(std::string* shash);
  private:
  const std::string& _internal_shash() const;
  void _internal_set_shash(const std::string& value);
  std::string* _internal_mutable_shash();
  public:

  // string prevHash = 6;
  void clear_prevhash();
  const std::string& prevhash() const;
  void set_prevhash(const std::string& value);
  void set_prevhash(std::string&& value);
  void set_prevhash(const char* value);
  void set_prevhash(const char* value, size_t size);
  std::string* mutable_prevhash();
  std::string* release_prevhash();
  void set_allocated_prevhash(std::string* prevhash);
  private:
  const std::string& _internal_prevhash() const;
  void _internal_set_prevhash(const std::string& value);
  std::string* _internal_mutable_prevhash();
  public:

  // fixed64 nBlockNum = 1;
  void clear_nblocknum();
  ::PROTOBUF_NAMESPACE_ID::uint64 nblocknum() const;
  void set_nblocknum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_nblocknum() const;
  void _internal_set_nblocknum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // fixed64 nNonce = 2;
  void clear_nnonce();
  ::PROTOBUF_NAMESPACE_ID::uint64 nnonce() const;
  void set_nnonce(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_nnonce() const;
  void _internal_set_nnonce(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // fixed64 tTime = 5;
  void clear_ttime();
  ::PROTOBUF_NAMESPACE_ID::uint64 ttime() const;
  void set_ttime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ttime() const;
  void _internal_set_ttime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:testtree.serialize.serBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sdata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prevhash_;
  ::PROTOBUF_NAMESPACE_ID::uint64 nblocknum_;
  ::PROTOBUF_NAMESPACE_ID::uint64 nnonce_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ttime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class serBlockchain PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:testtree.serialize.serBlockchain) */ {
 public:
  inline serBlockchain() : serBlockchain(nullptr) {}
  virtual ~serBlockchain();
  explicit constexpr serBlockchain(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  serBlockchain(const serBlockchain& from);
  serBlockchain(serBlockchain&& from) noexcept
    : serBlockchain() {
    *this = ::std::move(from);
  }

  inline serBlockchain& operator=(const serBlockchain& from) {
    CopyFrom(from);
    return *this;
  }
  inline serBlockchain& operator=(serBlockchain&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const serBlockchain& default_instance() {
    return *internal_default_instance();
  }
  static inline const serBlockchain* internal_default_instance() {
    return reinterpret_cast<const serBlockchain*>(
               &_serBlockchain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(serBlockchain& a, serBlockchain& b) {
    a.Swap(&b);
  }
  inline void Swap(serBlockchain* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(serBlockchain* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline serBlockchain* New() const final {
    return CreateMaybeMessage<serBlockchain>(nullptr);
  }

  serBlockchain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<serBlockchain>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const serBlockchain& from);
  void MergeFrom(const serBlockchain& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(serBlockchain* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "testtree.serialize.serBlockchain";
  }
  protected:
  explicit serBlockchain(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Packet_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockFieldNumber = 3,
    kBlockCountFieldNumber = 1,
    kNDifficultyFieldNumber = 2,
  };
  // repeated .testtree.serialize.serBlock block = 3;
  int block_size() const;
  private:
  int _internal_block_size() const;
  public:
  void clear_block();
  ::testtree::serialize::serBlock* mutable_block(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::testtree::serialize::serBlock >*
      mutable_block();
  private:
  const ::testtree::serialize::serBlock& _internal_block(int index) const;
  ::testtree::serialize::serBlock* _internal_add_block();
  public:
  const ::testtree::serialize::serBlock& block(int index) const;
  ::testtree::serialize::serBlock* add_block();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::testtree::serialize::serBlock >&
      block() const;

  // fixed64 BlockCount = 1;
  void clear_blockcount();
  ::PROTOBUF_NAMESPACE_ID::uint64 blockcount() const;
  void set_blockcount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_blockcount() const;
  void _internal_set_blockcount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // fixed32 nDifficulty = 2;
  void clear_ndifficulty();
  ::PROTOBUF_NAMESPACE_ID::uint32 ndifficulty() const;
  void set_ndifficulty(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ndifficulty() const;
  void _internal_set_ndifficulty(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:testtree.serialize.serBlockchain)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::testtree::serialize::serBlock > block_;
  ::PROTOBUF_NAMESPACE_ID::uint64 blockcount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ndifficulty_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class serUser PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:testtree.serialize.serUser) */ {
 public:
  inline serUser() : serUser(nullptr) {}
  virtual ~serUser();
  explicit constexpr serUser(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  serUser(const serUser& from);
  serUser(serUser&& from) noexcept
    : serUser() {
    *this = ::std::move(from);
  }

  inline serUser& operator=(const serUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline serUser& operator=(serUser&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const serUser& default_instance() {
    return *internal_default_instance();
  }
  static inline const serUser* internal_default_instance() {
    return reinterpret_cast<const serUser*>(
               &_serUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(serUser& a, serUser& b) {
    a.Swap(&b);
  }
  inline void Swap(serUser* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(serUser* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline serUser* New() const final {
    return CreateMaybeMessage<serUser>(nullptr);
  }

  serUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<serUser>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const serUser& from);
  void MergeFrom(const serUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(serUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "testtree.serialize.serUser";
  }
  protected:
  explicit serUser(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Packet_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 1,
    kAboutYourselfFieldNumber = 2,
    kFirstNameFieldNumber = 3,
    kSecondNameFieldNumber = 4,
    kUserIdFieldNumber = 5,
  };
  // string nickname = 1;
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string aboutYourself = 2;
  void clear_aboutyourself();
  const std::string& aboutyourself() const;
  void set_aboutyourself(const std::string& value);
  void set_aboutyourself(std::string&& value);
  void set_aboutyourself(const char* value);
  void set_aboutyourself(const char* value, size_t size);
  std::string* mutable_aboutyourself();
  std::string* release_aboutyourself();
  void set_allocated_aboutyourself(std::string* aboutyourself);
  private:
  const std::string& _internal_aboutyourself() const;
  void _internal_set_aboutyourself(const std::string& value);
  std::string* _internal_mutable_aboutyourself();
  public:

  // string firstName = 3;
  void clear_firstname();
  const std::string& firstname() const;
  void set_firstname(const std::string& value);
  void set_firstname(std::string&& value);
  void set_firstname(const char* value);
  void set_firstname(const char* value, size_t size);
  std::string* mutable_firstname();
  std::string* release_firstname();
  void set_allocated_firstname(std::string* firstname);
  private:
  const std::string& _internal_firstname() const;
  void _internal_set_firstname(const std::string& value);
  std::string* _internal_mutable_firstname();
  public:

  // string secondName = 4;
  void clear_secondname();
  const std::string& secondname() const;
  void set_secondname(const std::string& value);
  void set_secondname(std::string&& value);
  void set_secondname(const char* value);
  void set_secondname(const char* value, size_t size);
  std::string* mutable_secondname();
  std::string* release_secondname();
  void set_allocated_secondname(std::string* secondname);
  private:
  const std::string& _internal_secondname() const;
  void _internal_set_secondname(const std::string& value);
  std::string* _internal_mutable_secondname();
  public:

  // fixed64 userId = 5;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::uint64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:testtree.serialize.serUser)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aboutyourself_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firstname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secondname_;
  ::PROTOBUF_NAMESPACE_ID::uint64 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class serTree PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:testtree.serialize.serTree) */ {
 public:
  inline serTree() : serTree(nullptr) {}
  virtual ~serTree();
  explicit constexpr serTree(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  serTree(const serTree& from);
  serTree(serTree&& from) noexcept
    : serTree() {
    *this = ::std::move(from);
  }

  inline serTree& operator=(const serTree& from) {
    CopyFrom(from);
    return *this;
  }
  inline serTree& operator=(serTree&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const serTree& default_instance() {
    return *internal_default_instance();
  }
  static inline const serTree* internal_default_instance() {
    return reinterpret_cast<const serTree*>(
               &_serTree_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(serTree& a, serTree& b) {
    a.Swap(&b);
  }
  inline void Swap(serTree* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(serTree* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline serTree* New() const final {
    return CreateMaybeMessage<serTree>(nullptr);
  }

  serTree* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<serTree>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const serTree& from);
  void MergeFrom(const serTree& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(serTree* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "testtree.serialize.serTree";
  }
  protected:
  explicit serTree(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Packet_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlldataFieldNumber = 1,
  };
  // string alldata = 1;
  void clear_alldata();
  const std::string& alldata() const;
  void set_alldata(const std::string& value);
  void set_alldata(std::string&& value);
  void set_alldata(const char* value);
  void set_alldata(const char* value, size_t size);
  std::string* mutable_alldata();
  std::string* release_alldata();
  void set_allocated_alldata(std::string* alldata);
  private:
  const std::string& _internal_alldata() const;
  void _internal_set_alldata(const std::string& value);
  std::string* _internal_mutable_alldata();
  public:

  // @@protoc_insertion_point(class_scope:testtree.serialize.serTree)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alldata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Packet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// serBlock

// fixed64 nBlockNum = 1;
inline void serBlock::clear_nblocknum() {
  nblocknum_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 serBlock::_internal_nblocknum() const {
  return nblocknum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 serBlock::nblocknum() const {
  // @@protoc_insertion_point(field_get:testtree.serialize.serBlock.nBlockNum)
  return _internal_nblocknum();
}
inline void serBlock::_internal_set_nblocknum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  nblocknum_ = value;
}
inline void serBlock::set_nblocknum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_nblocknum(value);
  // @@protoc_insertion_point(field_set:testtree.serialize.serBlock.nBlockNum)
}

// fixed64 nNonce = 2;
inline void serBlock::clear_nnonce() {
  nnonce_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 serBlock::_internal_nnonce() const {
  return nnonce_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 serBlock::nnonce() const {
  // @@protoc_insertion_point(field_get:testtree.serialize.serBlock.nNonce)
  return _internal_nnonce();
}
inline void serBlock::_internal_set_nnonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  nnonce_ = value;
}
inline void serBlock::set_nnonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_nnonce(value);
  // @@protoc_insertion_point(field_set:testtree.serialize.serBlock.nNonce)
}

// string sData = 3;
inline void serBlock::clear_sdata() {
  sdata_.ClearToEmpty();
}
inline const std::string& serBlock::sdata() const {
  // @@protoc_insertion_point(field_get:testtree.serialize.serBlock.sData)
  return _internal_sdata();
}
inline void serBlock::set_sdata(const std::string& value) {
  _internal_set_sdata(value);
  // @@protoc_insertion_point(field_set:testtree.serialize.serBlock.sData)
}
inline std::string* serBlock::mutable_sdata() {
  // @@protoc_insertion_point(field_mutable:testtree.serialize.serBlock.sData)
  return _internal_mutable_sdata();
}
inline const std::string& serBlock::_internal_sdata() const {
  return sdata_.Get();
}
inline void serBlock::_internal_set_sdata(const std::string& value) {
  
  sdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void serBlock::set_sdata(std::string&& value) {
  
  sdata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:testtree.serialize.serBlock.sData)
}
inline void serBlock::set_sdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:testtree.serialize.serBlock.sData)
}
inline void serBlock::set_sdata(const char* value,
    size_t size) {
  
  sdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:testtree.serialize.serBlock.sData)
}
inline std::string* serBlock::_internal_mutable_sdata() {
  
  return sdata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* serBlock::release_sdata() {
  // @@protoc_insertion_point(field_release:testtree.serialize.serBlock.sData)
  return sdata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void serBlock::set_allocated_sdata(std::string* sdata) {
  if (sdata != nullptr) {
    
  } else {
    
  }
  sdata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sdata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:testtree.serialize.serBlock.sData)
}

// string sHash = 4;
inline void serBlock::clear_shash() {
  shash_.ClearToEmpty();
}
inline const std::string& serBlock::shash() const {
  // @@protoc_insertion_point(field_get:testtree.serialize.serBlock.sHash)
  return _internal_shash();
}
inline void serBlock::set_shash(const std::string& value) {
  _internal_set_shash(value);
  // @@protoc_insertion_point(field_set:testtree.serialize.serBlock.sHash)
}
inline std::string* serBlock::mutable_shash() {
  // @@protoc_insertion_point(field_mutable:testtree.serialize.serBlock.sHash)
  return _internal_mutable_shash();
}
inline const std::string& serBlock::_internal_shash() const {
  return shash_.Get();
}
inline void serBlock::_internal_set_shash(const std::string& value) {
  
  shash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void serBlock::set_shash(std::string&& value) {
  
  shash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:testtree.serialize.serBlock.sHash)
}
inline void serBlock::set_shash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  shash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:testtree.serialize.serBlock.sHash)
}
inline void serBlock::set_shash(const char* value,
    size_t size) {
  
  shash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:testtree.serialize.serBlock.sHash)
}
inline std::string* serBlock::_internal_mutable_shash() {
  
  return shash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* serBlock::release_shash() {
  // @@protoc_insertion_point(field_release:testtree.serialize.serBlock.sHash)
  return shash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void serBlock::set_allocated_shash(std::string* shash) {
  if (shash != nullptr) {
    
  } else {
    
  }
  shash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:testtree.serialize.serBlock.sHash)
}

// fixed64 tTime = 5;
inline void serBlock::clear_ttime() {
  ttime_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 serBlock::_internal_ttime() const {
  return ttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 serBlock::ttime() const {
  // @@protoc_insertion_point(field_get:testtree.serialize.serBlock.tTime)
  return _internal_ttime();
}
inline void serBlock::_internal_set_ttime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  ttime_ = value;
}
inline void serBlock::set_ttime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ttime(value);
  // @@protoc_insertion_point(field_set:testtree.serialize.serBlock.tTime)
}

// string prevHash = 6;
inline void serBlock::clear_prevhash() {
  prevhash_.ClearToEmpty();
}
inline const std::string& serBlock::prevhash() const {
  // @@protoc_insertion_point(field_get:testtree.serialize.serBlock.prevHash)
  return _internal_prevhash();
}
inline void serBlock::set_prevhash(const std::string& value) {
  _internal_set_prevhash(value);
  // @@protoc_insertion_point(field_set:testtree.serialize.serBlock.prevHash)
}
inline std::string* serBlock::mutable_prevhash() {
  // @@protoc_insertion_point(field_mutable:testtree.serialize.serBlock.prevHash)
  return _internal_mutable_prevhash();
}
inline const std::string& serBlock::_internal_prevhash() const {
  return prevhash_.Get();
}
inline void serBlock::_internal_set_prevhash(const std::string& value) {
  
  prevhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void serBlock::set_prevhash(std::string&& value) {
  
  prevhash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:testtree.serialize.serBlock.prevHash)
}
inline void serBlock::set_prevhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prevhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:testtree.serialize.serBlock.prevHash)
}
inline void serBlock::set_prevhash(const char* value,
    size_t size) {
  
  prevhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:testtree.serialize.serBlock.prevHash)
}
inline std::string* serBlock::_internal_mutable_prevhash() {
  
  return prevhash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* serBlock::release_prevhash() {
  // @@protoc_insertion_point(field_release:testtree.serialize.serBlock.prevHash)
  return prevhash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void serBlock::set_allocated_prevhash(std::string* prevhash) {
  if (prevhash != nullptr) {
    
  } else {
    
  }
  prevhash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prevhash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:testtree.serialize.serBlock.prevHash)
}

// -------------------------------------------------------------------

// serBlockchain

// fixed64 BlockCount = 1;
inline void serBlockchain::clear_blockcount() {
  blockcount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 serBlockchain::_internal_blockcount() const {
  return blockcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 serBlockchain::blockcount() const {
  // @@protoc_insertion_point(field_get:testtree.serialize.serBlockchain.BlockCount)
  return _internal_blockcount();
}
inline void serBlockchain::_internal_set_blockcount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  blockcount_ = value;
}
inline void serBlockchain::set_blockcount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_blockcount(value);
  // @@protoc_insertion_point(field_set:testtree.serialize.serBlockchain.BlockCount)
}

// fixed32 nDifficulty = 2;
inline void serBlockchain::clear_ndifficulty() {
  ndifficulty_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 serBlockchain::_internal_ndifficulty() const {
  return ndifficulty_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 serBlockchain::ndifficulty() const {
  // @@protoc_insertion_point(field_get:testtree.serialize.serBlockchain.nDifficulty)
  return _internal_ndifficulty();
}
inline void serBlockchain::_internal_set_ndifficulty(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ndifficulty_ = value;
}
inline void serBlockchain::set_ndifficulty(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ndifficulty(value);
  // @@protoc_insertion_point(field_set:testtree.serialize.serBlockchain.nDifficulty)
}

// repeated .testtree.serialize.serBlock block = 3;
inline int serBlockchain::_internal_block_size() const {
  return block_.size();
}
inline int serBlockchain::block_size() const {
  return _internal_block_size();
}
inline void serBlockchain::clear_block() {
  block_.Clear();
}
inline ::testtree::serialize::serBlock* serBlockchain::mutable_block(int index) {
  // @@protoc_insertion_point(field_mutable:testtree.serialize.serBlockchain.block)
  return block_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::testtree::serialize::serBlock >*
serBlockchain::mutable_block() {
  // @@protoc_insertion_point(field_mutable_list:testtree.serialize.serBlockchain.block)
  return &block_;
}
inline const ::testtree::serialize::serBlock& serBlockchain::_internal_block(int index) const {
  return block_.Get(index);
}
inline const ::testtree::serialize::serBlock& serBlockchain::block(int index) const {
  // @@protoc_insertion_point(field_get:testtree.serialize.serBlockchain.block)
  return _internal_block(index);
}
inline ::testtree::serialize::serBlock* serBlockchain::_internal_add_block() {
  return block_.Add();
}
inline ::testtree::serialize::serBlock* serBlockchain::add_block() {
  // @@protoc_insertion_point(field_add:testtree.serialize.serBlockchain.block)
  return _internal_add_block();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::testtree::serialize::serBlock >&
serBlockchain::block() const {
  // @@protoc_insertion_point(field_list:testtree.serialize.serBlockchain.block)
  return block_;
}

// -------------------------------------------------------------------

// serUser

// string nickname = 1;
inline void serUser::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& serUser::nickname() const {
  // @@protoc_insertion_point(field_get:testtree.serialize.serUser.nickname)
  return _internal_nickname();
}
inline void serUser::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:testtree.serialize.serUser.nickname)
}
inline std::string* serUser::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:testtree.serialize.serUser.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& serUser::_internal_nickname() const {
  return nickname_.Get();
}
inline void serUser::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void serUser::set_nickname(std::string&& value) {
  
  nickname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:testtree.serialize.serUser.nickname)
}
inline void serUser::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:testtree.serialize.serUser.nickname)
}
inline void serUser::set_nickname(const char* value,
    size_t size) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:testtree.serialize.serUser.nickname)
}
inline std::string* serUser::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* serUser::release_nickname() {
  // @@protoc_insertion_point(field_release:testtree.serialize.serUser.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void serUser::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:testtree.serialize.serUser.nickname)
}

// string aboutYourself = 2;
inline void serUser::clear_aboutyourself() {
  aboutyourself_.ClearToEmpty();
}
inline const std::string& serUser::aboutyourself() const {
  // @@protoc_insertion_point(field_get:testtree.serialize.serUser.aboutYourself)
  return _internal_aboutyourself();
}
inline void serUser::set_aboutyourself(const std::string& value) {
  _internal_set_aboutyourself(value);
  // @@protoc_insertion_point(field_set:testtree.serialize.serUser.aboutYourself)
}
inline std::string* serUser::mutable_aboutyourself() {
  // @@protoc_insertion_point(field_mutable:testtree.serialize.serUser.aboutYourself)
  return _internal_mutable_aboutyourself();
}
inline const std::string& serUser::_internal_aboutyourself() const {
  return aboutyourself_.Get();
}
inline void serUser::_internal_set_aboutyourself(const std::string& value) {
  
  aboutyourself_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void serUser::set_aboutyourself(std::string&& value) {
  
  aboutyourself_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:testtree.serialize.serUser.aboutYourself)
}
inline void serUser::set_aboutyourself(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  aboutyourself_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:testtree.serialize.serUser.aboutYourself)
}
inline void serUser::set_aboutyourself(const char* value,
    size_t size) {
  
  aboutyourself_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:testtree.serialize.serUser.aboutYourself)
}
inline std::string* serUser::_internal_mutable_aboutyourself() {
  
  return aboutyourself_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* serUser::release_aboutyourself() {
  // @@protoc_insertion_point(field_release:testtree.serialize.serUser.aboutYourself)
  return aboutyourself_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void serUser::set_allocated_aboutyourself(std::string* aboutyourself) {
  if (aboutyourself != nullptr) {
    
  } else {
    
  }
  aboutyourself_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), aboutyourself,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:testtree.serialize.serUser.aboutYourself)
}

// string firstName = 3;
inline void serUser::clear_firstname() {
  firstname_.ClearToEmpty();
}
inline const std::string& serUser::firstname() const {
  // @@protoc_insertion_point(field_get:testtree.serialize.serUser.firstName)
  return _internal_firstname();
}
inline void serUser::set_firstname(const std::string& value) {
  _internal_set_firstname(value);
  // @@protoc_insertion_point(field_set:testtree.serialize.serUser.firstName)
}
inline std::string* serUser::mutable_firstname() {
  // @@protoc_insertion_point(field_mutable:testtree.serialize.serUser.firstName)
  return _internal_mutable_firstname();
}
inline const std::string& serUser::_internal_firstname() const {
  return firstname_.Get();
}
inline void serUser::_internal_set_firstname(const std::string& value) {
  
  firstname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void serUser::set_firstname(std::string&& value) {
  
  firstname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:testtree.serialize.serUser.firstName)
}
inline void serUser::set_firstname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  firstname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:testtree.serialize.serUser.firstName)
}
inline void serUser::set_firstname(const char* value,
    size_t size) {
  
  firstname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:testtree.serialize.serUser.firstName)
}
inline std::string* serUser::_internal_mutable_firstname() {
  
  return firstname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* serUser::release_firstname() {
  // @@protoc_insertion_point(field_release:testtree.serialize.serUser.firstName)
  return firstname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void serUser::set_allocated_firstname(std::string* firstname) {
  if (firstname != nullptr) {
    
  } else {
    
  }
  firstname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), firstname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:testtree.serialize.serUser.firstName)
}

// string secondName = 4;
inline void serUser::clear_secondname() {
  secondname_.ClearToEmpty();
}
inline const std::string& serUser::secondname() const {
  // @@protoc_insertion_point(field_get:testtree.serialize.serUser.secondName)
  return _internal_secondname();
}
inline void serUser::set_secondname(const std::string& value) {
  _internal_set_secondname(value);
  // @@protoc_insertion_point(field_set:testtree.serialize.serUser.secondName)
}
inline std::string* serUser::mutable_secondname() {
  // @@protoc_insertion_point(field_mutable:testtree.serialize.serUser.secondName)
  return _internal_mutable_secondname();
}
inline const std::string& serUser::_internal_secondname() const {
  return secondname_.Get();
}
inline void serUser::_internal_set_secondname(const std::string& value) {
  
  secondname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void serUser::set_secondname(std::string&& value) {
  
  secondname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:testtree.serialize.serUser.secondName)
}
inline void serUser::set_secondname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secondname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:testtree.serialize.serUser.secondName)
}
inline void serUser::set_secondname(const char* value,
    size_t size) {
  
  secondname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:testtree.serialize.serUser.secondName)
}
inline std::string* serUser::_internal_mutable_secondname() {
  
  return secondname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* serUser::release_secondname() {
  // @@protoc_insertion_point(field_release:testtree.serialize.serUser.secondName)
  return secondname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void serUser::set_allocated_secondname(std::string* secondname) {
  if (secondname != nullptr) {
    
  } else {
    
  }
  secondname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secondname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:testtree.serialize.serUser.secondName)
}

// fixed64 userId = 5;
inline void serUser::clear_userid() {
  userid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 serUser::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 serUser::userid() const {
  // @@protoc_insertion_point(field_get:testtree.serialize.serUser.userId)
  return _internal_userid();
}
inline void serUser::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  userid_ = value;
}
inline void serUser::set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:testtree.serialize.serUser.userId)
}

// -------------------------------------------------------------------

// serTree

// string alldata = 1;
inline void serTree::clear_alldata() {
  alldata_.ClearToEmpty();
}
inline const std::string& serTree::alldata() const {
  // @@protoc_insertion_point(field_get:testtree.serialize.serTree.alldata)
  return _internal_alldata();
}
inline void serTree::set_alldata(const std::string& value) {
  _internal_set_alldata(value);
  // @@protoc_insertion_point(field_set:testtree.serialize.serTree.alldata)
}
inline std::string* serTree::mutable_alldata() {
  // @@protoc_insertion_point(field_mutable:testtree.serialize.serTree.alldata)
  return _internal_mutable_alldata();
}
inline const std::string& serTree::_internal_alldata() const {
  return alldata_.Get();
}
inline void serTree::_internal_set_alldata(const std::string& value) {
  
  alldata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void serTree::set_alldata(std::string&& value) {
  
  alldata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:testtree.serialize.serTree.alldata)
}
inline void serTree::set_alldata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  alldata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:testtree.serialize.serTree.alldata)
}
inline void serTree::set_alldata(const char* value,
    size_t size) {
  
  alldata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:testtree.serialize.serTree.alldata)
}
inline std::string* serTree::_internal_mutable_alldata() {
  
  return alldata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* serTree::release_alldata() {
  // @@protoc_insertion_point(field_release:testtree.serialize.serTree.alldata)
  return alldata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void serTree::set_allocated_alldata(std::string* alldata) {
  if (alldata != nullptr) {
    
  } else {
    
  }
  alldata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alldata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:testtree.serialize.serTree.alldata)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace serialize
}  // namespace testtree

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Packet_2eproto
