// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Packet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Packet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Packet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Packet_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Packet_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_Packet_2eproto_metadata_getter(int index);
namespace testtree {
namespace serialize {
class Chat;
struct ChatDefaultTypeInternal;
extern ChatDefaultTypeInternal _Chat_default_instance_;
class FirstPerson;
struct FirstPersonDefaultTypeInternal;
extern FirstPersonDefaultTypeInternal _FirstPerson_default_instance_;
class Full_Message;
struct Full_MessageDefaultTypeInternal;
extern Full_MessageDefaultTypeInternal _Full_Message_default_instance_;
class SecondPerson;
struct SecondPersonDefaultTypeInternal;
extern SecondPersonDefaultTypeInternal _SecondPerson_default_instance_;
}  // namespace serialize
}  // namespace testtree
PROTOBUF_NAMESPACE_OPEN
template<> ::testtree::serialize::Chat* Arena::CreateMaybeMessage<::testtree::serialize::Chat>(Arena*);
template<> ::testtree::serialize::FirstPerson* Arena::CreateMaybeMessage<::testtree::serialize::FirstPerson>(Arena*);
template<> ::testtree::serialize::Full_Message* Arena::CreateMaybeMessage<::testtree::serialize::Full_Message>(Arena*);
template<> ::testtree::serialize::SecondPerson* Arena::CreateMaybeMessage<::testtree::serialize::SecondPerson>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace testtree {
namespace serialize {

// ===================================================================

class FirstPerson PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:testtree.serialize.FirstPerson) */ {
 public:
  inline FirstPerson() : FirstPerson(nullptr) {}
  virtual ~FirstPerson();
  explicit constexpr FirstPerson(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FirstPerson(const FirstPerson& from);
  FirstPerson(FirstPerson&& from) noexcept
    : FirstPerson() {
    *this = ::std::move(from);
  }

  inline FirstPerson& operator=(const FirstPerson& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirstPerson& operator=(FirstPerson&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirstPerson& default_instance() {
    return *internal_default_instance();
  }
  static inline const FirstPerson* internal_default_instance() {
    return reinterpret_cast<const FirstPerson*>(
               &_FirstPerson_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FirstPerson& a, FirstPerson& b) {
    a.Swap(&b);
  }
  inline void Swap(FirstPerson* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FirstPerson* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirstPerson* New() const final {
    return CreateMaybeMessage<FirstPerson>(nullptr);
  }

  FirstPerson* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirstPerson>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirstPerson& from);
  void MergeFrom(const FirstPerson& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirstPerson* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "testtree.serialize.FirstPerson";
  }
  protected:
  explicit FirstPerson(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Packet_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // fixed64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:testtree.serialize.FirstPerson)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class SecondPerson PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:testtree.serialize.SecondPerson) */ {
 public:
  inline SecondPerson() : SecondPerson(nullptr) {}
  virtual ~SecondPerson();
  explicit constexpr SecondPerson(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SecondPerson(const SecondPerson& from);
  SecondPerson(SecondPerson&& from) noexcept
    : SecondPerson() {
    *this = ::std::move(from);
  }

  inline SecondPerson& operator=(const SecondPerson& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecondPerson& operator=(SecondPerson&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecondPerson& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecondPerson* internal_default_instance() {
    return reinterpret_cast<const SecondPerson*>(
               &_SecondPerson_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SecondPerson& a, SecondPerson& b) {
    a.Swap(&b);
  }
  inline void Swap(SecondPerson* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecondPerson* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecondPerson* New() const final {
    return CreateMaybeMessage<SecondPerson>(nullptr);
  }

  SecondPerson* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecondPerson>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecondPerson& from);
  void MergeFrom(const SecondPerson& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecondPerson* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "testtree.serialize.SecondPerson";
  }
  protected:
  explicit SecondPerson(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Packet_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // fixed64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:testtree.serialize.SecondPerson)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class Full_Message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:testtree.serialize.Full_Message) */ {
 public:
  inline Full_Message() : Full_Message(nullptr) {}
  virtual ~Full_Message();
  explicit constexpr Full_Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Full_Message(const Full_Message& from);
  Full_Message(Full_Message&& from) noexcept
    : Full_Message() {
    *this = ::std::move(from);
  }

  inline Full_Message& operator=(const Full_Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Full_Message& operator=(Full_Message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Full_Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const Full_Message* internal_default_instance() {
    return reinterpret_cast<const Full_Message*>(
               &_Full_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Full_Message& a, Full_Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Full_Message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Full_Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Full_Message* New() const final {
    return CreateMaybeMessage<Full_Message>(nullptr);
  }

  Full_Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Full_Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Full_Message& from);
  void MergeFrom(const Full_Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Full_Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "testtree.serialize.Full_Message";
  }
  protected:
  explicit Full_Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Packet_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kChatIdFieldNumber = 2,
    kAuthorIdFieldNumber = 3,
  };
  // string data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // fixed64 chatId = 2;
  void clear_chatid();
  ::PROTOBUF_NAMESPACE_ID::uint64 chatid() const;
  void set_chatid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_chatid() const;
  void _internal_set_chatid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // fixed64 authorId = 3;
  void clear_authorid();
  ::PROTOBUF_NAMESPACE_ID::uint64 authorid() const;
  void set_authorid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_authorid() const;
  void _internal_set_authorid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:testtree.serialize.Full_Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 chatid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 authorid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class Chat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:testtree.serialize.Chat) */ {
 public:
  inline Chat() : Chat(nullptr) {}
  virtual ~Chat();
  explicit constexpr Chat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chat(const Chat& from);
  Chat(Chat&& from) noexcept
    : Chat() {
    *this = ::std::move(from);
  }

  inline Chat& operator=(const Chat& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chat& operator=(Chat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Chat& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chat* internal_default_instance() {
    return reinterpret_cast<const Chat*>(
               &_Chat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Chat& a, Chat& b) {
    a.Swap(&b);
  }
  inline void Swap(Chat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chat* New() const final {
    return CreateMaybeMessage<Chat>(nullptr);
  }

  Chat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chat& from);
  void MergeFrom(const Chat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "testtree.serialize.Chat";
  }
  protected:
  explicit Chat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Packet_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFulltxtFieldNumber = 5,
    kFrsprsChatFieldNumber = 2,
    kScndprsChatFieldNumber = 3,
    kMesFieldNumber = 4,
    kChatidFieldNumber = 1,
  };
  // string fulltxt = 5;
  void clear_fulltxt();
  const std::string& fulltxt() const;
  void set_fulltxt(const std::string& value);
  void set_fulltxt(std::string&& value);
  void set_fulltxt(const char* value);
  void set_fulltxt(const char* value, size_t size);
  std::string* mutable_fulltxt();
  std::string* release_fulltxt();
  void set_allocated_fulltxt(std::string* fulltxt);
  private:
  const std::string& _internal_fulltxt() const;
  void _internal_set_fulltxt(const std::string& value);
  std::string* _internal_mutable_fulltxt();
  public:

  // .testtree.serialize.FirstPerson frsprs_chat = 2;
  bool has_frsprs_chat() const;
  private:
  bool _internal_has_frsprs_chat() const;
  public:
  void clear_frsprs_chat();
  const ::testtree::serialize::FirstPerson& frsprs_chat() const;
  ::testtree::serialize::FirstPerson* release_frsprs_chat();
  ::testtree::serialize::FirstPerson* mutable_frsprs_chat();
  void set_allocated_frsprs_chat(::testtree::serialize::FirstPerson* frsprs_chat);
  private:
  const ::testtree::serialize::FirstPerson& _internal_frsprs_chat() const;
  ::testtree::serialize::FirstPerson* _internal_mutable_frsprs_chat();
  public:
  void unsafe_arena_set_allocated_frsprs_chat(
      ::testtree::serialize::FirstPerson* frsprs_chat);
  ::testtree::serialize::FirstPerson* unsafe_arena_release_frsprs_chat();

  // .testtree.serialize.SecondPerson scndprs_chat = 3;
  bool has_scndprs_chat() const;
  private:
  bool _internal_has_scndprs_chat() const;
  public:
  void clear_scndprs_chat();
  const ::testtree::serialize::SecondPerson& scndprs_chat() const;
  ::testtree::serialize::SecondPerson* release_scndprs_chat();
  ::testtree::serialize::SecondPerson* mutable_scndprs_chat();
  void set_allocated_scndprs_chat(::testtree::serialize::SecondPerson* scndprs_chat);
  private:
  const ::testtree::serialize::SecondPerson& _internal_scndprs_chat() const;
  ::testtree::serialize::SecondPerson* _internal_mutable_scndprs_chat();
  public:
  void unsafe_arena_set_allocated_scndprs_chat(
      ::testtree::serialize::SecondPerson* scndprs_chat);
  ::testtree::serialize::SecondPerson* unsafe_arena_release_scndprs_chat();

  // .testtree.serialize.Full_Message mes = 4;
  bool has_mes() const;
  private:
  bool _internal_has_mes() const;
  public:
  void clear_mes();
  const ::testtree::serialize::Full_Message& mes() const;
  ::testtree::serialize::Full_Message* release_mes();
  ::testtree::serialize::Full_Message* mutable_mes();
  void set_allocated_mes(::testtree::serialize::Full_Message* mes);
  private:
  const ::testtree::serialize::Full_Message& _internal_mes() const;
  ::testtree::serialize::Full_Message* _internal_mutable_mes();
  public:
  void unsafe_arena_set_allocated_mes(
      ::testtree::serialize::Full_Message* mes);
  ::testtree::serialize::Full_Message* unsafe_arena_release_mes();

  // fixed64 chatid = 1;
  void clear_chatid();
  ::PROTOBUF_NAMESPACE_ID::uint64 chatid() const;
  void set_chatid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_chatid() const;
  void _internal_set_chatid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:testtree.serialize.Chat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fulltxt_;
  ::testtree::serialize::FirstPerson* frsprs_chat_;
  ::testtree::serialize::SecondPerson* scndprs_chat_;
  ::testtree::serialize::Full_Message* mes_;
  ::PROTOBUF_NAMESPACE_ID::uint64 chatid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Packet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FirstPerson

// fixed64 id = 1;
inline void FirstPerson::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FirstPerson::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FirstPerson::id() const {
  // @@protoc_insertion_point(field_get:testtree.serialize.FirstPerson.id)
  return _internal_id();
}
inline void FirstPerson::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void FirstPerson::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:testtree.serialize.FirstPerson.id)
}

// -------------------------------------------------------------------

// SecondPerson

// fixed64 id = 1;
inline void SecondPerson::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SecondPerson::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SecondPerson::id() const {
  // @@protoc_insertion_point(field_get:testtree.serialize.SecondPerson.id)
  return _internal_id();
}
inline void SecondPerson::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void SecondPerson::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:testtree.serialize.SecondPerson.id)
}

// -------------------------------------------------------------------

// Full_Message

// string data = 1;
inline void Full_Message::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& Full_Message::data() const {
  // @@protoc_insertion_point(field_get:testtree.serialize.Full_Message.data)
  return _internal_data();
}
inline void Full_Message::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:testtree.serialize.Full_Message.data)
}
inline std::string* Full_Message::mutable_data() {
  // @@protoc_insertion_point(field_mutable:testtree.serialize.Full_Message.data)
  return _internal_mutable_data();
}
inline const std::string& Full_Message::_internal_data() const {
  return data_.Get();
}
inline void Full_Message::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Full_Message::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:testtree.serialize.Full_Message.data)
}
inline void Full_Message::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:testtree.serialize.Full_Message.data)
}
inline void Full_Message::set_data(const char* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:testtree.serialize.Full_Message.data)
}
inline std::string* Full_Message::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Full_Message::release_data() {
  // @@protoc_insertion_point(field_release:testtree.serialize.Full_Message.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Full_Message::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:testtree.serialize.Full_Message.data)
}

// fixed64 chatId = 2;
inline void Full_Message::clear_chatid() {
  chatid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Full_Message::_internal_chatid() const {
  return chatid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Full_Message::chatid() const {
  // @@protoc_insertion_point(field_get:testtree.serialize.Full_Message.chatId)
  return _internal_chatid();
}
inline void Full_Message::_internal_set_chatid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  chatid_ = value;
}
inline void Full_Message::set_chatid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_chatid(value);
  // @@protoc_insertion_point(field_set:testtree.serialize.Full_Message.chatId)
}

// fixed64 authorId = 3;
inline void Full_Message::clear_authorid() {
  authorid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Full_Message::_internal_authorid() const {
  return authorid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Full_Message::authorid() const {
  // @@protoc_insertion_point(field_get:testtree.serialize.Full_Message.authorId)
  return _internal_authorid();
}
inline void Full_Message::_internal_set_authorid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  authorid_ = value;
}
inline void Full_Message::set_authorid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_authorid(value);
  // @@protoc_insertion_point(field_set:testtree.serialize.Full_Message.authorId)
}

// -------------------------------------------------------------------

// Chat

// fixed64 chatid = 1;
inline void Chat::clear_chatid() {
  chatid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Chat::_internal_chatid() const {
  return chatid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Chat::chatid() const {
  // @@protoc_insertion_point(field_get:testtree.serialize.Chat.chatid)
  return _internal_chatid();
}
inline void Chat::_internal_set_chatid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  chatid_ = value;
}
inline void Chat::set_chatid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_chatid(value);
  // @@protoc_insertion_point(field_set:testtree.serialize.Chat.chatid)
}

// .testtree.serialize.FirstPerson frsprs_chat = 2;
inline bool Chat::_internal_has_frsprs_chat() const {
  return this != internal_default_instance() && frsprs_chat_ != nullptr;
}
inline bool Chat::has_frsprs_chat() const {
  return _internal_has_frsprs_chat();
}
inline void Chat::clear_frsprs_chat() {
  if (GetArena() == nullptr && frsprs_chat_ != nullptr) {
    delete frsprs_chat_;
  }
  frsprs_chat_ = nullptr;
}
inline const ::testtree::serialize::FirstPerson& Chat::_internal_frsprs_chat() const {
  const ::testtree::serialize::FirstPerson* p = frsprs_chat_;
  return p != nullptr ? *p : reinterpret_cast<const ::testtree::serialize::FirstPerson&>(
      ::testtree::serialize::_FirstPerson_default_instance_);
}
inline const ::testtree::serialize::FirstPerson& Chat::frsprs_chat() const {
  // @@protoc_insertion_point(field_get:testtree.serialize.Chat.frsprs_chat)
  return _internal_frsprs_chat();
}
inline void Chat::unsafe_arena_set_allocated_frsprs_chat(
    ::testtree::serialize::FirstPerson* frsprs_chat) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frsprs_chat_);
  }
  frsprs_chat_ = frsprs_chat;
  if (frsprs_chat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:testtree.serialize.Chat.frsprs_chat)
}
inline ::testtree::serialize::FirstPerson* Chat::release_frsprs_chat() {
  
  ::testtree::serialize::FirstPerson* temp = frsprs_chat_;
  frsprs_chat_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::testtree::serialize::FirstPerson* Chat::unsafe_arena_release_frsprs_chat() {
  // @@protoc_insertion_point(field_release:testtree.serialize.Chat.frsprs_chat)
  
  ::testtree::serialize::FirstPerson* temp = frsprs_chat_;
  frsprs_chat_ = nullptr;
  return temp;
}
inline ::testtree::serialize::FirstPerson* Chat::_internal_mutable_frsprs_chat() {
  
  if (frsprs_chat_ == nullptr) {
    auto* p = CreateMaybeMessage<::testtree::serialize::FirstPerson>(GetArena());
    frsprs_chat_ = p;
  }
  return frsprs_chat_;
}
inline ::testtree::serialize::FirstPerson* Chat::mutable_frsprs_chat() {
  // @@protoc_insertion_point(field_mutable:testtree.serialize.Chat.frsprs_chat)
  return _internal_mutable_frsprs_chat();
}
inline void Chat::set_allocated_frsprs_chat(::testtree::serialize::FirstPerson* frsprs_chat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete frsprs_chat_;
  }
  if (frsprs_chat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(frsprs_chat);
    if (message_arena != submessage_arena) {
      frsprs_chat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frsprs_chat, submessage_arena);
    }
    
  } else {
    
  }
  frsprs_chat_ = frsprs_chat;
  // @@protoc_insertion_point(field_set_allocated:testtree.serialize.Chat.frsprs_chat)
}

// .testtree.serialize.SecondPerson scndprs_chat = 3;
inline bool Chat::_internal_has_scndprs_chat() const {
  return this != internal_default_instance() && scndprs_chat_ != nullptr;
}
inline bool Chat::has_scndprs_chat() const {
  return _internal_has_scndprs_chat();
}
inline void Chat::clear_scndprs_chat() {
  if (GetArena() == nullptr && scndprs_chat_ != nullptr) {
    delete scndprs_chat_;
  }
  scndprs_chat_ = nullptr;
}
inline const ::testtree::serialize::SecondPerson& Chat::_internal_scndprs_chat() const {
  const ::testtree::serialize::SecondPerson* p = scndprs_chat_;
  return p != nullptr ? *p : reinterpret_cast<const ::testtree::serialize::SecondPerson&>(
      ::testtree::serialize::_SecondPerson_default_instance_);
}
inline const ::testtree::serialize::SecondPerson& Chat::scndprs_chat() const {
  // @@protoc_insertion_point(field_get:testtree.serialize.Chat.scndprs_chat)
  return _internal_scndprs_chat();
}
inline void Chat::unsafe_arena_set_allocated_scndprs_chat(
    ::testtree::serialize::SecondPerson* scndprs_chat) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scndprs_chat_);
  }
  scndprs_chat_ = scndprs_chat;
  if (scndprs_chat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:testtree.serialize.Chat.scndprs_chat)
}
inline ::testtree::serialize::SecondPerson* Chat::release_scndprs_chat() {
  
  ::testtree::serialize::SecondPerson* temp = scndprs_chat_;
  scndprs_chat_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::testtree::serialize::SecondPerson* Chat::unsafe_arena_release_scndprs_chat() {
  // @@protoc_insertion_point(field_release:testtree.serialize.Chat.scndprs_chat)
  
  ::testtree::serialize::SecondPerson* temp = scndprs_chat_;
  scndprs_chat_ = nullptr;
  return temp;
}
inline ::testtree::serialize::SecondPerson* Chat::_internal_mutable_scndprs_chat() {
  
  if (scndprs_chat_ == nullptr) {
    auto* p = CreateMaybeMessage<::testtree::serialize::SecondPerson>(GetArena());
    scndprs_chat_ = p;
  }
  return scndprs_chat_;
}
inline ::testtree::serialize::SecondPerson* Chat::mutable_scndprs_chat() {
  // @@protoc_insertion_point(field_mutable:testtree.serialize.Chat.scndprs_chat)
  return _internal_mutable_scndprs_chat();
}
inline void Chat::set_allocated_scndprs_chat(::testtree::serialize::SecondPerson* scndprs_chat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete scndprs_chat_;
  }
  if (scndprs_chat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(scndprs_chat);
    if (message_arena != submessage_arena) {
      scndprs_chat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scndprs_chat, submessage_arena);
    }
    
  } else {
    
  }
  scndprs_chat_ = scndprs_chat;
  // @@protoc_insertion_point(field_set_allocated:testtree.serialize.Chat.scndprs_chat)
}

// .testtree.serialize.Full_Message mes = 4;
inline bool Chat::_internal_has_mes() const {
  return this != internal_default_instance() && mes_ != nullptr;
}
inline bool Chat::has_mes() const {
  return _internal_has_mes();
}
inline void Chat::clear_mes() {
  if (GetArena() == nullptr && mes_ != nullptr) {
    delete mes_;
  }
  mes_ = nullptr;
}
inline const ::testtree::serialize::Full_Message& Chat::_internal_mes() const {
  const ::testtree::serialize::Full_Message* p = mes_;
  return p != nullptr ? *p : reinterpret_cast<const ::testtree::serialize::Full_Message&>(
      ::testtree::serialize::_Full_Message_default_instance_);
}
inline const ::testtree::serialize::Full_Message& Chat::mes() const {
  // @@protoc_insertion_point(field_get:testtree.serialize.Chat.mes)
  return _internal_mes();
}
inline void Chat::unsafe_arena_set_allocated_mes(
    ::testtree::serialize::Full_Message* mes) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mes_);
  }
  mes_ = mes;
  if (mes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:testtree.serialize.Chat.mes)
}
inline ::testtree::serialize::Full_Message* Chat::release_mes() {
  
  ::testtree::serialize::Full_Message* temp = mes_;
  mes_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::testtree::serialize::Full_Message* Chat::unsafe_arena_release_mes() {
  // @@protoc_insertion_point(field_release:testtree.serialize.Chat.mes)
  
  ::testtree::serialize::Full_Message* temp = mes_;
  mes_ = nullptr;
  return temp;
}
inline ::testtree::serialize::Full_Message* Chat::_internal_mutable_mes() {
  
  if (mes_ == nullptr) {
    auto* p = CreateMaybeMessage<::testtree::serialize::Full_Message>(GetArena());
    mes_ = p;
  }
  return mes_;
}
inline ::testtree::serialize::Full_Message* Chat::mutable_mes() {
  // @@protoc_insertion_point(field_mutable:testtree.serialize.Chat.mes)
  return _internal_mutable_mes();
}
inline void Chat::set_allocated_mes(::testtree::serialize::Full_Message* mes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mes_;
  }
  if (mes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mes);
    if (message_arena != submessage_arena) {
      mes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mes, submessage_arena);
    }
    
  } else {
    
  }
  mes_ = mes;
  // @@protoc_insertion_point(field_set_allocated:testtree.serialize.Chat.mes)
}

// string fulltxt = 5;
inline void Chat::clear_fulltxt() {
  fulltxt_.ClearToEmpty();
}
inline const std::string& Chat::fulltxt() const {
  // @@protoc_insertion_point(field_get:testtree.serialize.Chat.fulltxt)
  return _internal_fulltxt();
}
inline void Chat::set_fulltxt(const std::string& value) {
  _internal_set_fulltxt(value);
  // @@protoc_insertion_point(field_set:testtree.serialize.Chat.fulltxt)
}
inline std::string* Chat::mutable_fulltxt() {
  // @@protoc_insertion_point(field_mutable:testtree.serialize.Chat.fulltxt)
  return _internal_mutable_fulltxt();
}
inline const std::string& Chat::_internal_fulltxt() const {
  return fulltxt_.Get();
}
inline void Chat::_internal_set_fulltxt(const std::string& value) {
  
  fulltxt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Chat::set_fulltxt(std::string&& value) {
  
  fulltxt_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:testtree.serialize.Chat.fulltxt)
}
inline void Chat::set_fulltxt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fulltxt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:testtree.serialize.Chat.fulltxt)
}
inline void Chat::set_fulltxt(const char* value,
    size_t size) {
  
  fulltxt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:testtree.serialize.Chat.fulltxt)
}
inline std::string* Chat::_internal_mutable_fulltxt() {
  
  return fulltxt_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Chat::release_fulltxt() {
  // @@protoc_insertion_point(field_release:testtree.serialize.Chat.fulltxt)
  return fulltxt_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Chat::set_allocated_fulltxt(std::string* fulltxt) {
  if (fulltxt != nullptr) {
    
  } else {
    
  }
  fulltxt_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fulltxt,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:testtree.serialize.Chat.fulltxt)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace serialize
}  // namespace testtree

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Packet_2eproto
